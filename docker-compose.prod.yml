version: '3.9'
name: store-backend-prod

services:
  traefik:
    image: traefik:v3.1
    restart: unless-stopped
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL:-admin@example.com}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.caserver=${TRAEFIK_ACME_CASERVER:-https://acme-v02.api.letsencrypt.org/directory}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - proxy

  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-store}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - internal

  backend:
    # Use published image (preferred in prod); set GHCR_OWNER and optionally BACKEND_IMAGE_TAG in .env
    image: ghcr.io/${GHCR_OWNER:-your-github-username}/store-backend:${BACKEND_IMAGE_TAG:-latest}
    # Alternatively, build locally:
    # build:
    #   context: .
    #   dockerfile: Dockerfile.backend
    restart: unless-stopped
    depends_on:
      - db
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-store}?schema=public}
      # Optional controls
      SKIP_PRISMA_GENERATE: ${SKIP_PRISMA_GENERATE:-false}
      SKIP_PRISMA_MIGRATE: ${SKIP_PRISMA_MIGRATE:-false}
      # Add other secrets like JWT, SMTP, etc.
      # JWT_SECRET: ${JWT_SECRET}
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`${BACKEND_HOST:-api.localhost}`)
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls=true
      - traefik.http.routers.backend.tls.certresolver=letsencrypt
      - traefik.http.services.backend.loadbalancer.server.port=3000
    networks:
      - internal
      - proxy

  invoice-ocr:
    image: ghcr.io/${GHCR_OWNER:-your-github-username}/invoice-ocr:${OCR_IMAGE_TAG:-latest}
    restart: unless-stopped
    environment:
      TZ: UTC
      BARCODE_MIN_LENGTH: 7
      BARCODE_MAX_LENGTH: 14
      OCR_RASTER_DPI: 400
      OCR_REMOVE_LINES: 1
      OCR_PSMS: "6,4,12,11,3"
    labels:
      - traefik.enable=true
      - traefik.http.routers.invoice-ocr.rule=Host(`${OCR_HOST:-ocr.localhost}`)
      - traefik.http.routers.invoice-ocr.entrypoints=websecure
      - traefik.http.routers.invoice-ocr.tls=true
      - traefik.http.routers.invoice-ocr.tls.certresolver=letsencrypt
      - traefik.http.services.invoice-ocr.loadbalancer.server.port=8000
    networks:
      - internal
      - proxy

volumes:
  db_data:
  traefik_letsencrypt:

networks:
  internal:
    internal: true
  proxy:
