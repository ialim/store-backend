version: '3.9'
name: store-backend-prod

services:
  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${ASSET_S3_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${ASSET_S3_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:9000/minio/health/ready || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - internal

  minio-init:
    image: minio/mc:RELEASE.2025-08-13T08-35-41Z
    depends_on:
      minio:
        condition: service_healthy
    entrypoint:
      - /bin/sh
      - -c
      - >-
        mc alias set local http://minio:9000 ${ASSET_S3_ACCESS_KEY:-minioadmin} ${ASSET_S3_SECRET_KEY:-minioadmin}
        && mc mb --ignore-existing local/${ASSET_S3_BUCKET:-store-assets}
        && mc anonymous set download local/${ASSET_S3_BUCKET:-store-assets}
    restart: 'no'
    networks:
      - internal

  traefik:
    image: traefik:v3.1
    restart: unless-stopped
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL:-admin@example.com}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.caserver=${TRAEFIK_ACME_CASERVER:-https://acme-v02.api.letsencrypt.org/directory}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - proxy

  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-store}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - internal

  backend:
    # Use published image (preferred in prod); set GHCR_OWNER and optionally BACKEND_IMAGE_TAG in .env
    image: ghcr.io/${GHCR_OWNER:-your-github-username}/store-backend:${BACKEND_IMAGE_TAG:-latest}
    # Alternatively, build locally:
    # build:
    #   context: .
    #   dockerfile: Dockerfile.backend
    restart: unless-stopped
    depends_on:
      - db
      - minio-init
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-store}?schema=public}
      # Optional controls
      SKIP_PRISMA_GENERATE: ${SKIP_PRISMA_GENERATE:-false}
      SKIP_PRISMA_MIGRATE: ${SKIP_PRISMA_MIGRATE:-false}
      ADMIN_UI_ORIGIN: ${ADMIN_UI_ORIGIN:-http://localhost:5173}
      ASSET_S3_ENDPOINT: ${ASSET_S3_ENDPOINT:-http://minio:9000}
      ASSET_S3_REGION: ${ASSET_S3_REGION:-us-east-1}
      ASSET_S3_ACCESS_KEY: ${ASSET_S3_ACCESS_KEY:-minioadmin}
      ASSET_S3_SECRET_KEY: ${ASSET_S3_SECRET_KEY:-minioadmin}
      ASSET_S3_BUCKET: ${ASSET_S3_BUCKET:-store-assets}
      ASSET_S3_FORCE_PATH_STYLE: ${ASSET_S3_FORCE_PATH_STYLE:-true}
      ASSET_PUBLIC_URL: ${ASSET_PUBLIC_URL:-http://localhost:9000/store-assets}
      # Add other secrets like JWT, SMTP, etc.
      # JWT_SECRET: ${JWT_SECRET}
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`${BACKEND_HOST:-api.localhost}`)
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls=true
      - traefik.http.routers.backend.tls.certresolver=letsencrypt
      - traefik.http.services.backend.loadbalancer.server.port=3000
    networks:
      - internal
      - proxy

  invoice-ocr:
    image: ghcr.io/${GHCR_OWNER:-your-github-username}/invoice-ocr:${OCR_IMAGE_TAG:-latest}
    restart: unless-stopped
    environment:
      TZ: UTC
      BARCODE_MIN_LENGTH: 7
      BARCODE_MAX_LENGTH: 14
      OCR_RASTER_DPI: 400
      OCR_REMOVE_LINES: 1
      OCR_PSMS: "6,4,12,11,3"
    labels:
      - traefik.enable=true
      - traefik.http.routers.invoice-ocr.rule=Host(`${OCR_HOST:-ocr.localhost}`)
      - traefik.http.routers.invoice-ocr.entrypoints=websecure
      - traefik.http.routers.invoice-ocr.tls=true
      - traefik.http.routers.invoice-ocr.tls.certresolver=letsencrypt
      - traefik.http.services.invoice-ocr.loadbalancer.server.port=8000
    networks:
      - internal
      - proxy

volumes:
  db_data:
  traefik_letsencrypt:
  minio_data:

networks:
  internal:
    internal: true
  proxy:
