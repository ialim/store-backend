name: CI

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: app
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=2s
          --health-retries=30
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/app?schema=public
      CI: "true"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        run: npm ci
      - name: Generate Prisma client
        run: npx prisma generate
      - name: Sync schema to test DB (db push)
        run: npx prisma db push --accept-data-loss
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm test
      - name: Build
        run: npm run build

  admin_ui:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: admin-ui
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: admin-ui/package-lock.json
      - name: Install deps
        run: npm ci
      - name: Build (skips codegen in CI)
        run: npm run build

  python_ocr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r python-invoice-ocr/requirements.txt
      - name: Static check (compile)
        run: |
          python -m py_compile $(git ls-files "python-invoice-ocr/**/*.py") || true
      - name: Build Docker image
        run: docker build -t invoice-ocr-ci ./python-invoice-ocr

